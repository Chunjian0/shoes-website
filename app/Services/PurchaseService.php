<?php

declare(strict_types=1);

namespace App\Services;

use App\Models\Purchase;
use App\Models\PurchaseItem;
use App\Models\Payment;
use App\Enums\PaymentStatus;
use App\Enums\PurchaseStatus;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use App\Services\ActivityLogService;
use App\Events\PurchaseStatusChanged;
use Illuminate\Support\Facades\Log;
use App\Models\CompanyProfile;
use Illuminate\Support\Facades\Mail;
use App\Mail\PurchaseOrderMail;
use App\Models\Warehouse;
use App\Services\InventoryService;
use App\Models\QualityInspection;

class PurchaseService
{
    public function __construct(
        private readonly ActivityLogService $activityLogService,
        private readonly InventoryService $inventoryService
    ) {}

    /**
     * Create a purchase order
     */
    public function createPurchase(array $data): Purchase
    {
        Log::info('Start creating a purchase order', [
            'input_data' => $data,
            'user_id' => auth()->id() ?? 'system',
            'user_name' => auth()->user()->name ?? 'Auto Purchase System'
        ]);

        return DB::transaction(function () use ($data) {
            try {
                // Record warehouse information
                $warehouse = Warehouse::find($data['warehouse_id']);
                Log::info('Warehouse information:', [
                    'warehouse_id' => $warehouse->id,
                    'warehouse_name' => $warehouse->name,
                    'warehouse_address' => $warehouse->address
                ]);

                // 检查是否为自动生成采购单
                $isAutoGenerated = $data['auto_generated'] ?? false;
                $supplierId = $data['supplier_id'] ?? null;

                // Create basic data for purchase orders
                $purchaseData = [
                    'warehouse_id' => $data['warehouse_id'],
                    'purchase_number' => $this->generatePurchaseNumber(),
                    'purchase_date' => $data['purchase_date'] ?? now()->format('Y-m-d'),
                    'notes' => $data['notes'] ?? null,
                    'purchase_status' => 'pending',
                    'payment_status' => 'unpaid',
                    'total_amount' => 0,
                    'tax_amount' => 0,
                    'shipping_fee' => 0,
                    'final_amount' => 0,
                ];

                Log::info('Prepare to create a purchase order:', [
                    'purchase_data' => $purchaseData,
                    'is_auto_generated' => $isAutoGenerated
                ]);

                $purchase = new Purchase();
                $purchase->fill($purchaseData);
                $purchase->save();

                Log::info('Purchase order creation successfully:', [
                    'purchase_id' => $purchase->id,
                    'purchase_number' => $purchase->purchase_number
                ]);

                // 处理自动生成的采购单（单一供应商）
                if ($isAutoGenerated && $supplierId) {
                    $this->processAutoGeneratedPurchase($purchase, $supplierId, $data['items']);
                } else {
                    // 处理手动创建的采购单（多供应商）
                    // Group products by supplier
                    $supplierItems = [];
                    foreach ($data['items'] as $item) {
                        $supplierId = $item['supplier_id'];
                        if (!isset($supplierItems[$supplierId])) {
                            $supplierItems[$supplierId] = [
                                'items' => [],
                                'total_amount' => 0,
                                'tax_amount' => 0,
                                'shipping_fee' => $data['supplier_shipping_fee'][$supplierId] ?? 0,
                            ];
                        }
                        $supplierItems[$supplierId]['items'][] = $item;
                    }

                    Log::info('Product grouping results by supplier:', [
                        'supplier_items' => $supplierItems
                    ]);

                    // Create supplier details and product details
                    foreach ($supplierItems as $supplierId => $supplierData) {
                        $totalAmount = 0;
                        $totalTaxAmount = 0;

                        Log::info('Start processing of supplier data:', [
                            'supplier_id' => $supplierId,
                            'items_count' => count($supplierData['items']),
                            'shipping_fee' => $supplierData['shipping_fee']
                        ]);

                        // Create a vendor details
                        $supplierItem = $purchase->supplierItems()->create([
                            'supplier_id' => $supplierId,
                            'shipping_fee' => $supplierData['shipping_fee'],
                            'notes' => $data['supplier_notes'][$supplierId] ?? null,
                        ]);

                        Log::info('Successful creation of supplier details:', [
                            'supplier_item_id' => $supplierItem->id
                        ]);

                        // Create a product details
                        foreach ($supplierData['items'] as $item) {
                            Log::info('Processing product details:', [
                                'item_data' => $item,
                                'supplier_id' => $supplierId,
                                'purchase_id' => $purchase->id
                            ]);

                            try {
                                $subtotal = $item['quantity'] * $item['unit_price'];
                                $tax_amount = $subtotal * ($item['tax_rate'] / 100);

                                $purchaseItem = $purchase->items()->create([
                                    'product_id' => $item['product_id'],
                                    'supplier_id' => $supplierId,
                                    'quantity' => $item['quantity'],
                                    'unit_price' => $item['unit_price'],
                                    'tax_rate' => $item['tax_rate'] ?? 0,
                                    'tax_amount' => $tax_amount,
                                    'total_amount' => $subtotal,
                                    'discount_amount' => $item['discount_amount'] ?? 0,
                                    'notes' => $item['notes'] ?? null,
                                ]);

                                Log::info('Product details were created successfully:', [
                                    'purchase_item_id' => $purchaseItem->id,
                                    'supplier_id' => $purchaseItem->supplier_id,
                                    'total_amount' => $purchaseItem->total_amount,
                                    'tax_amount' => $purchaseItem->tax_amount
                                ]);
                            } catch (\Exception $e) {
                                Log::error('Product details failed to be created:', [
                                    'error' => $e->getMessage(),
                                    'item_data' => $item,
                                    'supplier_id' => $supplierId,
                                    'sql' => $e->getPrevious() ? $e->getPrevious()->getMessage() : null
                                ]);
                                throw $e;
                            }

                            $totalAmount += $subtotal;
                            $totalTaxAmount += $tax_amount;
                        }

                        // Update the total supplier details
                        $supplierItem->update([
                            'total_amount' => $totalAmount,
                            'tax_amount' => $totalTaxAmount,
                            'final_amount' => $totalAmount + $totalTaxAmount + ($supplierData['shipping_fee'] ?? 0),
                            'shipping_fee' => $supplierData['shipping_fee'] ?? 0
                        ]);

                        Log::info('Successfully updated the supplier details amount:', [
                            'supplier_id' => $supplierId,
                            'total_amount' => $totalAmount,
                            'tax_amount' => $totalTaxAmount,
                            'shipping_fee' => $supplierData['shipping_fee'] ?? 0,
                            'final_amount' => $totalAmount + $totalTaxAmount + ($supplierData['shipping_fee'] ?? 0)
                        ]);
                    }
                }

                // Calculate the total amount of the purchase order
                $totalAmount = $purchase->items->sum('total_amount');
                $taxAmount = $purchase->items->sum('tax_amount');
                
                // 处理shipping_fee，自动生成的采购单可能没有shipping_fee
                $shippingFee = 0;
                if ($isAutoGenerated) {
                    $shippingFee = $data['shipping_fee'] ?? 0;
                } else {
                    // 手动创建的采购单，shipping_fee来自供应商项的总和
                    $shippingFee = $purchase->supplierItems->sum('shipping_fee');
                }
                
                $finalAmount = $totalAmount + $taxAmount + $shippingFee;

                $purchase->update([
                    'total_amount' => $totalAmount,
                    'tax_amount' => $taxAmount,
                    'shipping_fee' => $shippingFee,
                    'final_amount' => $finalAmount
                ]);

                Log::info('Purchase order amount calculated:', [
                    'purchase_id' => $purchase->id,
                    'total_amount' => $totalAmount,
                    'tax_amount' => $taxAmount,
                    'shipping_fee' => $shippingFee,
                    'final_amount' => $finalAmount
                ]);

                $this->activityLogService->log(
                    $purchase,
                    'created',
                    $isAutoGenerated ? 'Auto generated purchase order' : 'Create a purchase order',
                    [
                        'purchase_number' => $purchase->purchase_number,
                        'total_amount' => $purchase->total_amount
                    ]
                );

                Log::info('Purchase order creation completed:', [
                    'purchase_id' => $purchase->id,
                    'purchase_number' => $purchase->purchase_number,
                    'total_amount' => $purchase->total_amount,
                    'is_auto_generated' => $isAutoGenerated
                ]);

                return $purchase;
            } catch (\Exception $e) {
                Log::error('Purchase order creation failed:', [
                    'error' => $e->getMessage(),
                    'trace' => $e->getTraceAsString(),
                    'file' => $e->getFile(),
                    'line' => $e->getLine(),
                    'input_data' => $data
                ]);
                throw $e;
            }
        });
    }

    /**
     * 处理自动生成的采购单项目
     */
    private function processAutoGeneratedPurchase(Purchase $purchase, int $supplierId, array $items): void
    {
        Log::info('Processing auto-generated purchase order items', [
            'purchase_id' => $purchase->id,
            'supplier_id' => $supplierId,
            'items_count' => count($items)
        ]);

        // 设置自动生成标记和生成者
        $purchase->update([
            'auto_generated' => true,
            'generated_by' => 'system'
        ]);

        foreach ($items as $item) {
            $supplierProduct = DB::table('supplier_products')
                ->where('id', $item['supplier_product_id'])
                ->first();

            if (!$supplierProduct) {
                Log::warning('Supplier product not found', [
                    'supplier_product_id' => $item['supplier_product_id']
                ]);
                continue;
            }

            $unitPrice = $item['purchase_price'] ?? $supplierProduct->purchase_price;
            $taxRate = $supplierProduct->tax_rate ?? 0;
            $subtotal = $item['quantity'] * $unitPrice;
            $taxAmount = $subtotal * ($taxRate / 100);

            $purchaseItem = $purchase->items()->create([
                'product_id' => $item['product_id'],
                'supplier_id' => $supplierId,
                'quantity' => $item['quantity'],
                'unit_price' => $unitPrice,
                'tax_rate' => $taxRate,
                'tax_amount' => $taxAmount,
                'total_amount' => $subtotal,
                'discount_amount' => 0,
                'notes' => "Auto generated - " . ($item['notes'] ?? ""),
                'lead_time' => $item['lead_time'] ?? null,
            ]);

            Log::info('Auto-generated purchase item created', [
                'purchase_item_id' => $purchaseItem->id,
                'product_id' => $item['product_id'],
                'quantity' => $item['quantity'],
                'unit_price' => $unitPrice,
                'subtotal' => $subtotal
            ]);
        }
    }

    /**
     * Update purchase orders
     */
    public function updatePurchase(Purchase $purchase, array $data): Purchase
    {
        return DB::transaction(function () use ($purchase, $data) {
            $oldData = $purchase->toArray();

            $purchase->update([
                'warehouse_id' => $data['warehouse_id'],
                'purchase_date' => $data['purchase_date'],
                'notes' => $data['notes'],
            ]);

            // Delete the original details
            $purchase->items()->delete();
            $purchase->supplierItems()->delete();

            // Groups of products by suppliers
            $supplierItems = [];
            foreach ($data['items'] as $item) {
                $supplierId = $item['supplier_id'];
                if (!isset($supplierItems[$supplierId])) {
                    $supplierItems[$supplierId] = [
                        'items' => [],
                        'total_amount' => 0,
                        'tax_amount' => 0,
                        'shipping_fee' => $item['shipping_fee'] ?? 0,
                    ];
                }
                $supplierItems[$supplierId]['items'][] = $item;
            }

            // Create supplier details and product details
            foreach ($supplierItems as $supplierId => $supplierData) {
                $totalAmount = 0;
                $totalTaxAmount = 0;

                // Create a vendor details
                $supplierItem = $purchase->supplierItems()->create([
                    'supplier_id' => $supplierId,
                    'shipping_fee' => $supplierData['shipping_fee'],
                    'notes' => $data['supplier_notes'][$supplierId] ?? null,
                ]);

                // Create a product details
                foreach ($supplierData['items'] as $item) {
                    $subtotal = $item['quantity'] * $item['unit_price'];
                    $tax_amount = $subtotal * ($item['tax_rate'] / 100);
                    
                    $purchaseItem = $purchase->items()->create([
                        'product_id' => $item['product_id'],
                        'supplier_id' => $supplierId,
                        'quantity' => $item['quantity'],
                        'unit_price' => $item['unit_price'],
                        'tax_rate' => $item['tax_rate'] ?? 0,
                        'tax_amount' => $tax_amount,
                        'total_amount' => $subtotal,
                        'discount_amount' => $item['discount_amount'] ?? 0,
                        'notes' => $item['notes'] ?? null,
                    ]);

                    $totalAmount += $subtotal;
                    $totalTaxAmount += $tax_amount;
                }

                // Update the total supplier details
                $supplierItem->update([
                    'total_amount' => $totalAmount,
                    'tax_amount' => $totalTaxAmount,
                    'final_amount' => $totalAmount + $totalTaxAmount + ($supplierData['shipping_fee'] ?? 0),
                    'shipping_fee' => $supplierData['shipping_fee'] ?? 0
                ]);
            }

            // Update the total purchase order amount
            $purchase->calculateTotalAmount();

            $this->activityLogService->logUpdated($purchase, [
                'old_data' => $oldData,
                'new_data' => $purchase->toArray(),
            ]);

            return $purchase;
        });
    }

    /**
     * Cancel purchase order
     *
     * @throws \InvalidArgumentException Cancel if order status is not allowed
     */
    public function cancelPurchase(Purchase $purchase): void
    {
        if ($purchase->purchase_status->value !== PurchaseStatus::PENDING->value) {
            throw new \InvalidArgumentException('Only purchase orders that are pending review status can be cancelled');
        }

        $oldStatus = $purchase->purchase_status->value;

        DB::transaction(function () use ($purchase, $oldStatus) {
            $purchase->update([
                'purchase_status' => PurchaseStatus::CANCELLED,
                'cancelled_at' => now(),
                'cancelled_by' => auth()->id()
            ]);

            // Record operation logs
            activity()
                ->performedOn($purchase)
                ->withProperties([
                    'status' => PurchaseStatus::CANCELLED->value,
                    'cancelled_by' => auth()->user()->name,
                    'purchase_number' => $purchase->purchase_number
                ])
                ->log('Purchase order cancelled');

            event(new PurchaseStatusChanged($purchase, $oldStatus, PurchaseStatus::CANCELLED->value));
        });
    }

    /**
     * Confirm receipt of goods
     *
     * @param Purchase $purchase
     * @param array $receivedQuantities
     * @throws \Exception
     */
    public function confirmReceived(Purchase $purchase, array $receivedQuantities, bool $autoCreateInspection = true): void
    {
        Log::info('Start processing of receipt confirmation', [
            'purchase_id' => $purchase->id,
            'purchase_number' => $purchase->purchase_number,
            'old_status' => $purchase->purchase_status->value,
            'auto_create_inspection' => $autoCreateInspection
        ]);

        if (empty($receivedQuantities)) {
            throw new \Exception('Please enter at least one product to receive quantity');
        }

        DB::beginTransaction();
        try {
            $allItemsReceived = true;
            $hasReceivedItems = false;

            foreach ($purchase->items as $item) {
                $receivedQuantity = (int)($receivedQuantities[$item->id] ?? 0);
                
                Log::info('Processing goods and receiving goods', [
                    'item_id' => $item->id,
                    'product_name' => $item->product->name,
                    'ordered_quantity' => $item->quantity,
                    'previous_received' => $item->received_quantity,
                    'new_received' => $receivedQuantity
                ]);

                // Verify the quantity received
                if ($receivedQuantity < 0) {
                    throw new \Exception("merchandise {$item->product->name} The quantity of goods received cannot be negative");
                }

                if ($receivedQuantity > 0) {
                    $hasReceivedItems = true;
                }

                $totalReceived = $item->received_quantity + $receivedQuantity;
                if ($totalReceived > $item->quantity) {
                    throw new \Exception("merchandise {$item->product->name} Total quantity of goods received {$totalReceived} Exceed order quantity {$item->quantity}");
                }

                if ($totalReceived < $item->quantity) {
                    $allItemsReceived = false;
                }

                // Update the quantity of goods received
                $item->received_quantity = $totalReceived;
                $item->save();

                // 只有当用户选择自动创建质量检测时才执行
                if ($autoCreateInspection && $receivedQuantity > 0) {
                    // Record the received quantity for quality inspection
                    $this->recordQualityInspection($item, $receivedQuantity);
                } elseif ($receivedQuantity > 0) {
                    // 如果用户选择不自动创建质检单，但收到了物品，直接增加库存
                    $this->inventoryService->increaseStock(
                        $item->product_id,
                        $receivedQuantity,
                        "Goods received for purchase order {$purchase->purchase_number}",
                        $purchase->warehouse_id
                    );
                    
                    Log::info('Inventory increased directly without quality inspection', [
                        'item_id' => $item->id,
                        'product_id' => $item->product_id,
                        'product_name' => $item->product->name,
                        'received_quantity' => $receivedQuantity,
                        'warehouse_id' => $purchase->warehouse_id
                    ]);
                }
            }

            if (!$hasReceivedItems) {
                throw new \Exception('Please enter at least one product to receive quantity');
            }

            // Update purchase order status
            $purchase->purchase_status = $allItemsReceived ? 
                PurchaseStatus::RECEIVED : 
                PurchaseStatus::PARTIALLY_RECEIVED;
            
            $purchase->received_at = now();
            $purchase->save();

            Log::info('Receipt confirmation is completed', [
                'purchase_id' => $purchase->id,
                'new_status' => $purchase->purchase_status->value,
                'all_items_received' => $allItemsReceived,
                'auto_create_inspection' => $autoCreateInspection
            ]);

            DB::commit();
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Receipt confirmation failed', [
                'purchase_id' => $purchase->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    private function recordQualityInspection($item, $receivedQuantity)
    {
        if ($receivedQuantity <= 0) {
            return; // 如果没有收到物品，无需创建质检记录
        }
        
        // 获取关联的 purchase 和 warehouse_id
        $purchase = $item->purchase;
        $warehouseId = $purchase->warehouse_id;
        
        Log::info('Recording quality inspection for item', [
            'item_id' => $item->id,
            'product_id' => $item->product_id,
            'product_name' => $item->product->name,
            'received_quantity' => $receivedQuantity,
            'warehouse_id' => $warehouseId
        ]);

        // 在这里，创建一个质量检测记录，而不是直接更新库存
        try {
            DB::beginTransaction();
            
            // 创建一个质量检测记录
            $inspection = QualityInspection::create([
                'purchase_id' => $purchase->id,
                'inspector_id' => auth()->id() ?? 1, // 设置为当前登录用户或默认为 ID 1
                'inspection_number' => 'QI' . date('YmdHis') . rand(100, 999),
                'inspection_date' => now(),
                'status' => \App\Enums\QualityInspectionStatus::PENDING,
                'is_partial' => true,
                'remarks' => "Receipt inspection for purchase order {$purchase->purchase_number}",
            ]);
            
            // 创建质检项目 - 默认设置合格数量等于检测数量
            $inspectionItem = $inspection->items()->create([
                'purchase_item_id' => $item->id,
                'inspected_quantity' => $receivedQuantity,
                'passed_quantity' => $receivedQuantity, // 自动设置合格数量等于检测数量
                'failed_quantity' => 0,
            ]);
            
            // 记录质检信息到日志
            Log::info('Quality inspection created', [
                'inspection_id' => $inspection->id,
                'inspection_number' => $inspection->inspection_number,
                'item_id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'received_quantity' => $receivedQuantity,
                'warehouse_id' => $warehouseId,
                'status' => $inspection->status->value
            ]);
            
            // 提交当前的事务以保存质检记录
            DB::commit();
            
            // 根据系统设置决定是否自动审批质量检验记录
            $autoApprove = config('settings.auto_approve_inspection', true);
            if ($autoApprove) {
                // 使用质量检测服务进行自动审批
                $qualityInspectionService = app(\App\Services\QualityInspectionService::class);
                $qualityInspectionService->approveInspection($inspection);
                
                Log::info('Quality inspection automatically approved', [
                    'inspection_id' => $inspection->id,
                    'inspection_number' => $inspection->inspection_number,
                    'passed_quantity' => $receivedQuantity
                ]);
            } else {
                Log::info('Quality inspection created but not automatically approved', [
                    'inspection_id' => $inspection->id,
                    'inspection_number' => $inspection->inspection_number,
                    'passed_quantity' => $receivedQuantity,
                    'auto_approve' => false
                ]);
            }
            
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Failed to create quality inspection', [
                'item_id' => $item->id,
                'product_id' => $item->product_id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * Review purchase orders
     */
    public function approvePurchase(Purchase $purchase): void
    {
        $oldStatus = $purchase->purchase_status->value;

        DB::transaction(function () use ($purchase, $oldStatus) {
            Log::info('Begin review of purchase orders', [
                'purchase_id' => $purchase->id,
                'purchase_number' => $purchase->purchase_number,
                'old_status' => $oldStatus
            ]);

            // Update Purchase Order Status
            $purchase->update([
                'purchase_status' => PurchaseStatus::APPROVED,
                'approved_by' => auth()->id(),
                'approved_at' => now(),
            ]);

            Log::info('Purchase order status updated', [
                'new_status' => PurchaseStatus::APPROVED->value,
                'approved_by' => auth()->id(),
                'approved_at' => now()
            ]);

            // Calculate the estimated arrival time for each item
            foreach ($purchase->items as $item) {
                Log::info('Start processing the procurement project', [
                    'item_id' => $item->id,
                    'product_id' => $item->product_id,
                    'supplier_id' => $item->supplier_id
                ]);

                // Get supplier product information
                $supplierProduct = DB::table('supplier_products')
                    ->where('supplier_id', $item->supplier_id)
                    ->where('product_id', $item->product_id)
                    ->first();

                Log::info('Obtain supplier product information', [
                    'supplier_product' => $supplierProduct,
                    'lead_time' => $supplierProduct ? $supplierProduct->lead_time : null
                ]);

                $leadTime = $supplierProduct ? $supplierProduct->lead_time : 0;
                $expectedDeliveryAt = now()->addDays($leadTime);

                Log::info('Calculate estimated delivery time', [
                    'lead_time' => $leadTime,
                    'expected_delivery_at' => $expectedDeliveryAt,
                    'calculation_base_time' => now()
                ]);

                $item->update([
                    'expected_delivery_at' => $expectedDeliveryAt,
                    'lead_time' => $leadTime
                ]);

                Log::info('Procurement project update completed', [
                    'item_id' => $item->id,
                    'updated_fields' => [
                        'expected_delivery_at' => $expectedDeliveryAt,
                        'lead_time' => $leadTime
                    ]
                ]);
            }

            // Record activity logs
            $this->activityLogService->log(
                $purchase,
                'approved',
                'Purchase order has been approved',
                [
                    'purchase_number' => $purchase->purchase_number,
                    'approved_by' => auth()->id(),
                ]
            );

            Log::info('Purchase order review completed', [
                'purchase_id' => $purchase->id,
                'purchase_number' => $purchase->purchase_number,
                'items_count' => $purchase->items->count()
            ]);

            // Trigger status change event
            event(new PurchaseStatusChanged($purchase, $oldStatus, PurchaseStatus::APPROVED->value));
        });
    }

    /**
     * Reject purchase order
     */
    public function rejectPurchase(Purchase $purchase): void
    {
        $oldStatus = $purchase->purchase_status->value;

        $purchase->update([
            'purchase_status' => PurchaseStatus::REJECTED,
            'rejected_by' => auth()->id(),
            'rejected_at' => now(),
        ]);

        event(new PurchaseStatusChanged($purchase, $oldStatus, PurchaseStatus::REJECTED->value));
    }

    /**
     * Generate purchase order number
     */
    private function generatePurchaseNumber(): string
    {
        $prefix = 'PO' . date('Ymd');
        $lastPurchase = Purchase::where('purchase_number', 'like', $prefix . '%')
            ->orderBy('purchase_number', 'desc')
            ->first();

        if ($lastPurchase) {
            $sequence = (int)substr($lastPurchase->purchase_number, -4) + 1;
        } else {
            $sequence = 1;
        }

        return $prefix . str_pad((string)$sequence, 4, '0', STR_PAD_LEFT);
    }

    /**
     * Record payment
     *
     * @param Purchase $purchase
     * @param array<string, mixed> $data
     */
    public function recordPayment(Purchase $purchase, array $data): Payment
    {
        return DB::transaction(function () use ($purchase, $data) {
            // Generate payment order number
            $data['payment_number'] = $this->generatePaymentNumber();
            
            // Create a payment history
            $payment = $purchase->payments()->create($data);
            
            // Update payment status of purchase orders
            $this->updatePurchasePaymentStatus($purchase);
            
            return $payment;
        });
    }

    /**
     * Generate payment order number
     */
    private function generatePaymentNumber(): string
    {
        $prefix = 'PAY' . date('Ymd');
        $number = Payment::where('payment_number', 'like', $prefix . '%')
            ->count() + 1;
        
        return $prefix . str_pad((string) $number, 4, '0', STR_PAD_LEFT);
    }

    /**
     * Update payment status of purchase orders
     */
    private function updatePurchasePaymentStatus(Purchase $purchase): void
    {
        $totalPaid = $purchase->payments()->sum('amount');
        
        if ($totalPaid >= $purchase->final_amount) {
            $purchase->updatePaymentStatus(PaymentStatus::PAID);
        } elseif ($totalPaid > 0) {
            $purchase->updatePaymentStatus(PaymentStatus::PARTIALLY_PAID);
        } else {
            $purchase->updatePaymentStatus(PaymentStatus::UNPAID);
        }
    }

    /**
     * Send purchase order email to supplier
     */
    public function sendToSupplier(Purchase $purchase, int $supplierId): void
    {
        $supplierItem = $purchase->supplierItems()
            ->with(['supplier', 'items.product'])
            ->where('supplier_id', $supplierId)
            ->firstOrFail();

        try {
            $company = CompanyProfile::first();

            Mail::to($supplierItem->supplier->email)
                ->send(new PurchaseOrderMail($purchase, $supplierItem, $company));

            $supplierItem->markEmailSent();
        } catch (\Exception $e) {
            Log::error('Failed to send purchase order email:', [
                'error' => $e->getMessage(),
                'purchase_id' => $purchase->id,
                'supplier_id' => $supplierId
            ]);
            throw $e;
        }
    }

    /**
     * 批准质量检测并更新库存
     *
     * @param QualityInspection $inspection
     * @param array $data 包含通过检测的数量信息
     * @throws \Exception
     */
    public function approveQualityInspection(QualityInspection $inspection, array $data): void
    {
        Log::info('Start approving quality inspection', [
            'inspection_id' => $inspection->id,
            'inspection_number' => $inspection->inspection_number,
            'data' => $data
        ]);

        if ($inspection->status !== \App\Enums\QualityInspectionStatus::PENDING) {
            throw new \Exception("此质检单已经处理，状态为 {$inspection->status->label()}，不能重复处理");
        }

        DB::beginTransaction();
        try {
            // 更新质检状态
            $inspection->status = \App\Enums\QualityInspectionStatus::PASSED;
            $inspection->inspector_id = auth()->id() ?? 1;
            $inspection->save();
            
            Log::info('Quality inspection status updated', [
                'inspection_id' => $inspection->id,
                'new_status' => $inspection->status->value,
                'inspector_id' => $inspection->inspector_id
            ]);
            
            $passedTotal = 0;
            $failedTotal = 0;

            // 处理每个质检项
            foreach ($inspection->items as $item) {
                $passedQuantity = (int)($data['items'][$item->id]['passed_quantity'] ?? 0);
                $failedQuantity = (int)($data['items'][$item->id]['failed_quantity'] ?? 0);
                
                Log::info('Processing inspection item', [
                    'item_id' => $item->id,
                    'purchase_item_id' => $item->purchase_item_id,
                    'inspected_quantity' => $item->inspected_quantity,
                    'passed_quantity' => $passedQuantity,
                    'failed_quantity' => $failedQuantity
                ]);
                
                // 验证数量
                if ($passedQuantity + $failedQuantity > $item->inspected_quantity) {
                    throw new \Exception("通过数量和不合格数量之和不能超过检测数量");
                }
                
                // 更新质检项数据
                $item->passed_quantity = $passedQuantity;
                $item->failed_quantity = $failedQuantity;
                $item->defect_description = $data['items'][$item->id]['defect_description'] ?? null;
                $item->save();
                
                Log::info('Inspection item updated', [
                    'item_id' => $item->id,
                    'passed_quantity' => $item->passed_quantity,
                    'failed_quantity' => $item->failed_quantity
                ]);
                
                $passedTotal += $passedQuantity;
                $failedTotal += $failedQuantity;
                
                // 如果有合格的商品，更新库存
                if ($passedQuantity > 0) {
                    $purchaseItem = $item->purchaseItem;
                    $purchase = $purchaseItem->purchase;
                    
                    Log::info('Preparing to update inventory', [
                        'purchase_item_id' => $purchaseItem->id,
                        'product_id' => $purchaseItem->product_id,
                        'product_name' => $purchaseItem->product->name ?? 'Unknown',
                        'warehouse_id' => $purchase->warehouse_id,
                        'passed_quantity' => $passedQuantity
                    ]);
                    
                    // 更新库存
                    $this->inventoryService->increaseStock(
                        $purchaseItem->product_id,
                        $passedQuantity,
                        "Quality inspection passed for product {$purchaseItem->product->name} - Inspection #{$inspection->inspection_number}",
                        $purchase->warehouse_id
                    );
                    
                    Log::info('Inventory updated after quality inspection', [
                        'inspection_id' => $inspection->id,
                        'product_id' => $purchaseItem->product_id,
                        'product_name' => $purchaseItem->product->name,
                        'passed_quantity' => $passedQuantity,
                        'warehouse_id' => $purchase->warehouse_id
                    ]);
                }
            }
            
            // 如果没有通过的商品，将状态改为失败
            if ($passedTotal == 0 && $failedTotal > 0) {
                $inspection->status = \App\Enums\QualityInspectionStatus::FAILED;
                $inspection->save();
                
                Log::info('Quality inspection status updated to FAILED', [
                    'inspection_id' => $inspection->id,
                    'reason' => 'No items passed inspection'
                ]);
            }
            
            // 记录操作日志
            $this->activityLogService->log(
                $inspection,
                'approved',
                'Quality inspection approved',
                [
                    'inspection_number' => $inspection->inspection_number,
                    'passed_quantity' => $passedTotal,
                    'failed_quantity' => $failedTotal
                ]
            );
            
            Log::info('Quality inspection approval completed', [
                'inspection_id' => $inspection->id,
                'inspection_number' => $inspection->inspection_number,
                'status' => $inspection->status->value,
                'passed_total' => $passedTotal,
                'failed_total' => $failedTotal
            ]);
            
            DB::commit();
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Quality inspection approval failed', [
                'inspection_id' => $inspection->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }
} 