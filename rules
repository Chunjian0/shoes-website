
PHP/Laravel
- Use PHP 8.2+ features when appropriate (e.g., typed properties, match expressions).
- Follow PSR-12 coding standards.
- Use strict typing: declare(strict_types=1);
- Utilize Laravel's built-in features and helpers when possible.
- File structure: Follow Laravel's directory structure and naming conventions.
- Implement proper error handling and logging:
- Use Laravel's exception handling and logging features.
- Create custom exceptions when necessary.
- Use try-catch blocks for expected exceptions.
- Use Laravel's validation features for form and request validation.
- Implement middleware for request filtering and modification.
- Utilize Laravel's Eloquent ORM for database interactions.
- Use Laravel's query builder for complex database queries.
- Implement proper database migrations and seeders.

Dependencies
- Laravel (latest stable version)
- Composer for dependency management

Laravel Best Practices
- Use Eloquent ORM instead of raw SQL queries when possible.
- Implement Repository pattern for data access layer.
- Use Laravel's built-in authentication and authorization features.
- Utilize Laravel's caching mechanisms for improved performance.
- Implement job queues for long-running tasks.
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
- Implement API versioning for public APIs.
- Use Laravel's localization features for multi-language support.
- Implement proper CSRF protection and security measures.
- Use Laravel Mix for asset compilation.
- Implement proper database indexing for improved query performance.
- Use Laravel's built-in pagination features.
- Implement proper error logging and monitoring.

Key Conventions
1. Follow Laravel's MVC architecture.
2. Use Laravel's routing system for defining application endpoints.
3. Implement proper request validation using Form Requests.
4. Use Laravel's Blade templating engine for views.
5. Implement proper database relationships using Eloquent.
6. Use Laravel's built-in authentication scaffolding.
7. Implement proper API resource transformations.
8. Use Laravel's event and listener system for decoupled code.
9. Implement proper database transactions for data integrity.
10. Use Laravel's built-in scheduling features for recurring tasks.
===============================
眼镜店管理系统项目规划文档 v1.0
===============================

目录
----
1. 项目背景
2. 技术架构
3. 功能模块详细设计
4. 数据库设计
5. API设计
6. 开发规范
7. 部署方案
8. 测试计划
9. 项目时间线

1. 项目背景
-----------
1.1 项目概述
本项目是一个基于Laravel框架开发的现代化眼镜店管理系统，旨在提供全面的业务管理解决方案.系统需符合马来西亚政府的E-Invoice要求，并集成多种自动化功能，以提高运营效率.

1.2 项目目标
- 实现眼镜店日常运营的数字化管理
- 提供符合政府规范的电子发票系统
- 优化客户服务流程
- 提高库存管理效率
- 实现业务流程自动化

2. 技术架构
-----------
2.1 开发环境
- PHP 8.2+
- Laravel 10.x
- MySQL 8.0+
- Redis 6.x
- Node.js 18.x (前端构建)

2.2 核心技术框架
- 后端框架：Laravel 10.x
- 前端框架：Vue.js 3
- 数据库：MySQL
- 缓存：Redis
- 队列：Laravel Queue + Redis
- 搜索引擎：Elasticsearch (可选)

2.3 主要依赖包
- Laravel Sanctum (API认证)
- Spatie/laravel-permission (权限管理)
- Laravel Excel (Excel处理)
- DomPDF (PDF生成)
- WhatsApp Cloud API SDK
- Intervention Image (图片处理)

3. 功能模块详细设计
------------------
3.1 用户认证与权限管理模块
- 功能描述：
  * 多角色用户系统
  * 基于角色的权限控制
  * 操作日志记录
  * 登录安全策略

- 具体实现：
  * 用户角色：
    - 超级管理员
    - 店长
    - 销售员
    - 验光师
    - 收银员
    - 库管员
  
  * 权限项目：
    - 用户管理权限
    - 客户管理权限
    - 商品管理权限
    - 库存管理权限
    - 财务管理权限
    - 报表查看权限

3.2 客户管理模块
- 基础信息管理：
  * 客户基本资料
  * IC号码识别及验证
  * 自动提取生日信息
  * 联系方式管理
  * 客户分类标签

- 验光数据管理：
  * 左右眼独立数据记录
  * 球镜度数记录
  * 柱镜度数记录
  * 轴向记录
  * PD值记录（双眼/单眼）
  * 验光历史追踪
  * 处方建议生成

- 消费记录管理：
  * 购买历史
  * 消费金额统计
  * 产品偏好分析
  * 会员积分管理
  * 优惠券使用记录

3.3 商品管理模块
- 产品分类管理：
  * 镜框
    - 品牌管理
    - 型号管理
    - 材质分类
    - 风格分类
    - 适用人群
    - 尺寸规格

  * 镜片
    - 类型（单焦点、渐进等）
    - 材质
    - 品牌
    - 功能特性
    - 折射率
    - 染色选项

  * 太阳镜
    - 品牌
    - 型号
    - 风格
    - 镜片特性
    - 防护等级

  * 配件
    - 眼镜盒
    - 清洁用品
    - 其他配件

3.4 智能通知系统
- WhatsApp集成：
  * 自动发送提醒
  * 消息模板管理
  * 发送记录追踪
  * 送达状态监控

- 通知类型：
  * 取货提醒
  * 生日祝福
  * 优惠活动
  * 预约提醒
  * 验光完成通知
  * 维修完成通知

- 通知管理：
  * 模板配置
  * 发送时间设置
  * 批量发送功能
  * 发送效果分析

3.5 库存管理模块
- 基础库存功能：
  * 实时库存监控
  * 最低库存预警
  * 自动补货提醒
  * 库存盘点管理
  * 报损处理

- 高级功能：
  * 智能补货建议
  * 销售预测
  * 季节性商品管理
  * 滞销品预警
  * 库存优化分析

3.6 供应商管理模块
- 供应商信息：
  * 基本信息管理
  * 联系人管理
  * 供应产品管理
  * 价格协议管理

- 采购管理：
  * 采购订单创建
  * 订单跟踪
  * 到货确认
  * 质量检验
  * 退货处理

- 账务管理：
  * 应付账款管理
  * 付款记录
  * 信用额度管理
  * 账期管理

3.7 电子发票模块 (符合马来西亚政府e invoice 要求)
- 发票生成：
  * 标准格式模板
  * 自动编号系统
  * 电子签名集成
  * 税费自动计算

- 核心要素：
  * 商家注册信息
  * GST注册号
  * 商品详细描述
  * 价格明细
  * 税费计算
  * 支付信息

- 功能特性：
  * PDF格式生成
  * 电子邮件发送
  * 批量处理
  * 归档管理
  * 查询检索

3.8 报表和分析模块
- 销售分析：
  * 日/周/月/年度报表
  * 商品销售分析
  * 毛利率分析
  * 销售趋势图表

- 客户分析：
  * 客户消费分析
  * 客户画像分析
  * 复购率分析
  * 客户流失预警

- 库存分析：
  * 库存周转率
  * 滞销品分析
  * 热销品分析
  * 季节性趋势

4. 数据库设计
------------
4.1 主要数据表
- users (用户表)
- customers (客户表)
- customer_prescriptions (客户验光数据表)
- products (商品表)
- product_categories (商品分类表)
- inventory (库存表)
- suppliers (供应商表)
- purchases (采购表)
- sales (销售表)
- invoices (发票表)
- notifications (通知表)

4.2 关键字段设计
- customers表：
  * id (主键)
  * ic_number (身份证号)
  * name (姓名)
  * birthday (生日)
  * contact_number (联系电话)
  * email (电子邮件)
  * address (地址)
  * created_at (创建时间)
  * updated_at (更新时间)

- customer_prescriptions表：
  * id (主键)
  * customer_id (客户ID)
  * left_sphere (左眼球镜)
  * right_sphere (右眼球镜)
  * left_cylinder (左眼柱镜)
  * right_cylinder (右眼柱镜)
  * left_axis (左眼轴向)
  * right_axis (右眼轴向)
  * pd_left (左眼PD值)
  * pd_right (右眼PD值)
  * add_power (加入度)
  * examination_date (验光日期)

5. API设计
---------
5.1 RESTful API端点
- 客户管理：
  * GET /api/customers
  * POST /api/customers
  * GET /api/customers/{id}
  * PUT /api/customers/{id}
  * DELETE /api/customers/{id}

- 商品管理：
  * GET /api/products
  * POST /api/products
  * GET /api/products/{id}
  * PUT /api/products/{id}
  * DELETE /api/products/{id}

5.2 API认证
- 使用Laravel Sanctum
- Token基于认证
- 请求频率限制

6. 开发规范
----------
6.1 代码规范
- PSR-4自动加载规范
- PSR-12代码风格规范
- 统一的命名约定
- 完整的注释文档

6.2 版本控制
- 使用Git进行版本控制
- 遵循Git Flow工作流
- 规范的提交信息格式

7. 部署方案
----------
7.1 环境要求
- PHP 8.2+
- MySQL 8.0+
- Redis 6.x
- Nginx/Apache
- SSL证书

7.2 部署步骤
- 环境配置
- 数据库迁移
- 缓存配置
- 队列服务启动
- SSL配置

8. 测试计划
----------
8.1 测试类型
- 单元测试
- 功能测试
- 集成测试
- 性能测试
- 用户验收测试

8.2 测试覆盖率要求
- 业务逻辑覆盖率 > 80%
- API测试覆盖率 > 90%
- 关键流程100%覆盖

9. 项目时间线
------------
9.1 第一阶段 (基础功能) - 8周
- 用户认证与权限
- 基础客户管理
- 基础商品管理
- 基础库存管理

9.2 第二阶段 (核心业务) - 12周
- 电子发票系统
- 验光数据管理
- 销售管理
- 采购管理

9.3 第三阶段 (高级功能) - 8周
- WhatsApp集成
- 智能通知系统
- 报表分析
- 数据可视化

9.4 第四阶段 (优化与测试) - 4周
- 性能优化
- 安全测试
- 用户测试
- 系统完善

注意事项
--------
1. 所有敏感数据需要加密存储
2. 定期备份数据库
3. 记录详细的操作日志
4. 保持代码文档的更新
5. 定期进行安全审计
6. 持续监控系统性能

更新记录
--------
- v1.0 2024-01-17 初始版本
- v1.1 待定