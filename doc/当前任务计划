# 编写高质量Dusk测试的关键事项和流程

## 1. 测试目标与范围定义

### 1.1 明确测试目的
- 确定测试的具体功能或场景
- 定义明确的测试场景和预期结果
- 避免测试过于宽泛或模糊

### 1.2 测试范围划分
- 聚焦单一功能或用户交互流程
- 考虑正常流程和异常场景
- 覆盖关键的用户交互路径

## 2. 选择器策略

### 2.1 选择器编写原则
- 使用稳定且唯一的选择器
- 优先使用语义化和测试专用属性
- 避免使用脆弱的选择器（如复杂的CSS路径）

```php
// 推荐做法
$browser->click('@login-submit-button')

// HTML示例
<button dusk="login-submit-button">登录</button>
```

### 2.2 选择器稳定性
- 添加专门的测试属性
- 避免依赖页面布局细节
- 保持选择器独立于UI变化

## 3. 测试结构与编写

### 3.1 测试方法设计
- 每个测试方法聚焦单一场景
- 使用描述性的方法名
- 保持测试方法简洁明了

```php
public function testUserCanSuccessfullyLogin()
{
    $this->browse(function (Browser $browser) {
        $browser->visit('/login')
               ->type('@email-input', 'user@example.com')
               ->type('@password-input', 'password')
               ->press('@login-button')
               ->assertPathIs('/dashboard');
    });
}
```

### 3.2 断言策略
- 使用具体和有意义的断言
- 验证关键状态和行为
- 覆盖成功和失败场景

## 4. 异步和动态内容处理

### 4.1 等待策略
- 使用适当的等待方法
- 避免使用固定时间延迟
- 根据实际页面加载情况选择等待机制

```php
// 等待元素可见
$browser->waitForText('加载完成')
        ->assertSee('操作成功');

// 等待元素可交互
$browser->waitUntilMissing('.loading-spinner');
```


## 6. 错误处理与调试

### 6.1 异常场景测试
- 测试边界条件
- 模拟错误输入
- 验证错误处理机制

### 6.2 调试技巧
- 使用截图功能
- 添加详细日志
- 捕获并记录异常信息

```php
$browser->screenshot('test-failure')
        ->pause(1000)
        ->logError('测试失败详情');
```

## 7. 性能与可维护性

### 7.1 测试性能优化
- 减少不必要的页面跳转
- 优化选择器查找
- 使用页面对象模式

### 7.2 代码质量
- 保持测试代码整洁
- 提取公共方法
- 使用有意义的变量和方法名

## 8. 持续集成与执行

### 8.1 测试执行策略
- 定期运行测试
- 配置CI/CD流程
- 设置超时和重试机制

### 8.2 测试报告
- 生成详细测试报告
- 跟踪测试覆盖率
- 及时修复失败测试

## 9. 最佳实践总结

### 9.1 关键原则
- 专注于用户行为
- 编写可读性强的测试
- 持续维护和更新测试用例
- 确保测试和测试之间的数据连贯 此外避免使用factory 来创建数据 可以使用之前运行的测试创建的数据

### 9.2 持续改进
- 定期审查测试用例
- 根据应用变化调整测试
- 学习和应用新的测试技术
