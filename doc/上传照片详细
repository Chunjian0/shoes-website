# 图片上传组件使用详细文档

## 1. 组件工作流程

### 1.1 基本流程

1. **初始化**：
   - 前端页面引入上传组件（如`x-image-uploader`、`x-employee-avatar-uploader`、`x-quality-inspection-image-uploader`等）
   - 组件初始化Alpine.js数据状态管理

2. **上传过程**：
   - 用户选择文件或拖拽文件到上传区域
   - 组件通过AJAX（fetch API）将文件发送到`media.store`路由
   - 后端`MediaController@store`处理上传请求
   - 验证并保存文件，返回媒体信息（ID、URL等）
   - 前端更新UI显示已上传图片

3. **临时关联**：
   - 创建新记录时，使用临时ID(`temp_id`)关联上传的媒体文件
   - 表单提交时，这个临时ID会一并提交

4. **永久关联**：
   - 表单提交后，控制器中的`associateMedia`方法将使用临时ID的媒体关联到实际模型
   - 更新媒体记录的`model_id`，清除`temp_id`

5. **编辑场景**：
   - 对已有记录进行编辑时，直接使用`model_id`进行关联
   - 无需临时ID流程

6. **删除操作**：
   - 用户点击删除按钮，组件发送DELETE请求到`/media/{id}`
   - 后端删除存储中的文件和数据库记录

## 2. 关键注意事项

### 2.1 临时ID处理

```php
// 正确做法：生成一次临时ID并共享
@php
    $tempId = Str::random(20);
@endphp
<input type="hidden" name="temp_id" value="{{ $tempId }}">
<x-quality-inspection-image-uploader
    :temp-id="$tempId"
    model-type="quality_inspections"
    :max-files="5"
    :images="[]"
/>
```

**常见错误**：在表单和组件中使用不同的随机ID，导致关联失败：

```php
// 错误示例 - 不要这样做
<input type="hidden" name="temp_id" value="{{ Str::random(20) }}">
<x-image-uploader :temp-id="Str::random(20)" ... />
```

### 2.2 组件属性定义

每个上传组件必须定义以下属性：

```php
@props([
    'modelId' => null,    // 编辑时使用的模型ID
    'modelType' => '...', // 模型类型，用于多态关联
    'maxFiles' => 5,      // 最大允许上传的文件数
    'images' => [],       // 已上传的图片集合
    'tempId' => null      // 创建时使用的临时ID
])
```

### 2.3 多态关联配置

必须在`AppServiceProvider`中配置正确的多态映射：

```php
// 在AppServiceProvider.php的boot方法中
Relation::morphMap([
    'products' => 'App\\Models\\Product',
    'App\\Models\\User' => 'App\\Models\\User', 
    'quality_inspections' => 'App\\Models\\QualityInspection',
    // 其他需要上传图片的模型...
]);
```

### 2.4 模型关联定义

每个需要关联媒体的模型必须定义`media()`方法：

```php
/**
 * 获取模型所有媒体文件
 */
public function media(): MorphMany
{
    return $this->morphMany(Media::class, 'model');
}
```

### 2.5 控制器预加载

在显示详情或编辑页面时，应预加载media关联以提高性能：

```php
$model->load(['otherRelation', 'media']);
```

## 3. 不同上传组件的使用场景

### 3.1 通用图片上传器 (x-image-uploader)

适用于多图片上传，如产品图片。

```php
<x-image-uploader
    :model-id="$product->id" 
    model-type="products"
    :max-files="5"
    :images="$product->media"
/>
```

### 3.2 头像上传器 (x-employee-avatar-uploader)

适用于员工或用户头像上传，通常限制为单张图片，有圆形裁剪样式。

```php
<x-employee-avatar-uploader
    :model-id="$employee->id"
    model-type="App\\Models\\User"
    :max-files="1"
    :images="$employee->avatar ? [[
        'id' => $employee->avatar->id,
        'name' => 'Employee Avatar',
        'url' => $employee->avatar_url
    ]] : []"
/>
```

### 3.3 质量检验图片上传器 (x-quality-inspection-image-uploader)

适用于质量检验相关图片上传，支持显示缺陷详情。

```php
<x-quality-inspection-image-uploader
    :model-id="$qualityInspection->id"
    model-type="quality_inspections"
    :max-files="5"
    :images="$qualityInspection->media"
/>
```

## 4. 创建与编辑流程区别

### 4.1 创建新记录

1. 生成临时ID
2. 使用临时ID上传图片
3. 提交表单时传递临时ID
4. 控制器创建记录后关联临时图片

```php
// 控制器中关联临时图片的代码
if ($request->filled('temp_id')) {
    $this->associateMedia($request->temp_id, $newRecord);
}

private function associateMedia(string $tempId, Model $model): void
{
    app(MediaController::class)->associate(new Request([
        'temp_id' => $tempId,
        'model_type' => '模型类型',
        'model_id' => $model->id,
    ]));
}
```

### 4.2 编辑已有记录

1. 直接加载关联的媒体文件
2. 上传新图片时直接关联到模型ID
3. 无需临时ID和关联步骤

## 5. 用户体验与错误处理

### 5.1 友好提示

使用SweetAlert2提供友好的提示信息：

```javascript
// 成功提示
Toast.fire({
    icon: 'success',
    title: '图片上传成功'
});

// 错误提示
Swal.fire({
    title: '上传失败',
    text: error.message,
    icon: 'error',
    confirmButtonText: '确定'
});

// 删除确认
const result = await Swal.fire({
    title: '确认删除',
    text: '确定要删除这张图片吗？',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: '确定删除',
    cancelButtonText: '取消'
});
```

### 5.2 错误处理最佳实践

1. 前端显示具体错误信息而非通用消息
2. 控制台记录详细错误日志便于调试
3. 服务器端记录异常情况到日志文件
4. 对文件尺寸、类型等进行前端预验证减少服务器压力

## 6. 常见问题及解决方案

### 6.1 图片上传成功但无法显示

可能原因：
- 存储链接未创建：运行`php artisan storage:link`
- 权限问题：检查存储目录权限
- 多态映射错误：检查`AppServiceProvider`中的映射配置
- URL生成错误：检查`asset()`函数使用是否正确

### 6.2 临时媒体无法关联到模型

可能原因：
- 临时ID不一致：确保上传和表单提交使用相同的临时ID
- 缺少`associateMedia`代码：检查控制器是否实现了关联逻辑
- 关联请求失败：检查日志中是否有关联错误

### 6.3 编辑页面无法加载已有图片

可能原因：
- 未正确预加载关联：确保使用`$model->load(['media'])`
- 组件图片属性配置错误：检查`:images`属性传递的数据结构
- 多态类型不匹配：确保数据库中的`model_type`与配置的映射一致

## 7. 安全性考虑

1. **文件验证**：验证文件类型、大小和内容安全性
2. **权限检查**：确保只有授权用户能上传和管理图片
3. **存储隔离**：不同模型的图片存储在不同目录
4. **删除保护**：验证删除请求是否来自合法用户

## 8. 性能优化

1. **图片压缩**：考虑在服务器端压缩大图片
2. **懒加载**：在长列表中使用懒加载展示图片
3. **缓存**：配置适当的缓存策略缓存图片资源
4. **分页加载**：当图片数量庞大时，考虑分页加载图片
